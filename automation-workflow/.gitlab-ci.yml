stages:
    - setup
    - code_quality
    - tag
    - build
    - dockerbuild
    - release

services:
    - docker:dind

variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: /certs
    MOUNT_POINT: /builds/$CI_PROJECT_PATH/mnt
    TZ: Europe/Berlin

yarn:
    stage: setup
    image: node:12.16.3
    cache:
        key: $CI_COMMIT_REF_SLUG
        paths:
            - node_modules/
        policy: pull-push
    retry: 1
    script:
        - yarn install --frozen-lockfile --prefer-offline
    only:
        changes:
            - yarn.lock
            - package.json

yarn-refresh:
    stage: setup
    image: node:12.16.3
    cache:
        key: $CI_COMMIT_REF_SLUG
        paths:
            - node_modules/
        policy: pull-push
    retry: 1
    script:
        - eval "[[ -d node_modules ]] || yarn install --frozen-lockfile --prefer-offline"
    except:
        changes:
            - yarn.lock
            - package.json

typescript:
    stage: code_quality
    image: node:12.16.3
    retry: 1
    cache:
        key: $CI_COMMIT_REF_SLUG
        paths:
            - node_modules/
        policy: pull
    script:
        - yarn ci:ts
    except:
        - tags

lint:
    stage: code_quality
    image: node:12.16.3
    retry: 1
    cache:
        key: $CI_COMMIT_REF_SLUG
        paths:
            - node_modules/
        policy: pull
    script:
        - yarn ci:lint
        - yarn ci:stylelint
    except:
        - tags

tests:
    stage: code_quality
    image: node:12.16.3
    retry: 1
    cache:
        key: $CI_COMMIT_REF_SLUG
        paths:
            - node_modules/
        policy: pull
    script:
        - yarn ci:test
    except:
        - tags

autotag:
    stage: tag
    image: node:12.16.3
    cache:
        key: $CI_COMMIT_REF_SLUG
        paths:
            - node_modules/
        policy: pull
    script:
        - yarn semantic-release
    only:
        - master

build-app:
    stage: build
    image: node:12.16.3
    cache:
        key: $CI_COMMIT_REF_SLUG
        paths:
            - node_modules/
        policy: pull
    script:
        - yarn build
    artifacts:
        paths:
            - build
    except:
        - master

dockerfile:
    stage: dockerbuild
    image: docker:stable
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - DOCKER_BUILDKIT=1 docker build --build-arg BUILDKIT_INLINE_CACHE=1 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    except:
        - master

push-latest:
    variables:
        # We are just playing with Docker here.
        # We do not need GitLab to clone the source code.
        GIT_STRATEGY: none
    stage: release
    image: docker:stable
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    only:
        - tags
    script:
        # Because we have no guarantee that this job will be picked up by the same runner
        # that built the image in the previous step, we pull it again locally
        - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
        - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
        - docker push $CI_REGISTRY_IMAGE:latest

push-tag:
    variables:
        # Again, we do not need the source code here.
        GIT_STRATEGY: none
    stage: release
    image: docker:stable
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    only:
        - tags
    script:
        # Because we have no guarantee that this job will be picked up by the same runner
        # that built the image in the previous step, we pull it again locally
        - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
        # commits are tagged with the pattern release/${semver}, the part "release/" needs to be removed to be used as docker image tag
        - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG#release/}
        - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG#release/}

push-branch-tag:
    variables:
        # Again, we do not need the source code here.
        GIT_STRATEGY: none
    image: docker:stable
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    stage: release
    only:
        - develop
        - /^feature/.*$/
        - /^hotfix/.*$/
    script:
        # Because we have no guarantee that this job will be picked up by the same runner
        # that built the image in the previous step, we pull it again locally
        - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
        - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
